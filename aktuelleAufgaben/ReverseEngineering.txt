Um das Spiel Triple Triad Gold in Java zu simulieren, benötigen wir folgende Klassen:
- Game(main) 
- Board 
- Player 
- Deck 
- Card

Die Klasse Game enthält ein Objekt der Klasse Board und zwei Objekte der Klasse Player.
//Spieler evtl in Array speichern und aktuellen Spieler in int Variable.
Zu Spielbeginn werden alle Karten des Spielbretts mit (0,0,0,0) initialisiert.


//evtl Karten mit 11 initialisieren, da 10 höchster Wert.

Die Decks der Spieler werden mit der Methode loadDeck der Klasse Spieler geladen.
Alle Karten des Decks werden mit der jeweiligen Spielerfarbe initialisiert
Diese Klasse simuliert die abwechselnden Züge der Spieler und entscheidet am Spielende,
wer gewonnen und wer verloren hat.
Außerdem wird mit der Methode switchCards, der die aktuelle und die "besiegte" Karte übergeben
wird die Farbe der besiegten Karte geändert, und die Anzahl der aktuellen Karten des Spielers,
der an der Reihe ist um 1 erhöht, sowie die Anzahl der Karten des Gegners um 1 verringert.

Am Spielende wird die Methode changeCards aufgerufen, diese ruft wiederum die Methoden addCard
bzw. takeCard der Klasse Deck aufgerufen, um dem Verlierer eine Karte abzunehmen und dem
Verlierer zu übergeben.
Die Decks werden mit der Methode saveDeck der Klasse Player gespeichert. 
Wird das Spiel abgebrochen erhält der Gegner alle Karten die aktuell im Spiel sind in sein Deck.

Die Klasse Board enthält ein 3x3 Array vom Typ Card.
Mithilfe der Methode compareCards die die aktuell gelegte Karte übergeben bekommt, 
kann hier die neu gelegte Karte mit den umliegenden Karten verglichen werden. 
Ist ein Wert der neu gelegten an einer Seite höher als die umliegenden Karten, so wird die
durch Aufruf der Methode switchCard der Klasse GAME,die Farbe der Karte geändert 
und dem Gegner gut geschrieben.

Die Klasse Player enthält ein Objekt der Klasse Deck und eine Variable,
um die Anzahl der aktuellen Karten in Spielerfarbe zu speichern.
//Methoden evtl in Klasse Deck verschieben
Mit der Methode loadDeck kann das Deck aus einer vorher erstellen save-Datei geladen werden.
Ist keine solche Datei vorhanden, wird das Standard-Start-Deck geladen.
Ist eine save-Datei vorhanden, aber in dem gespeicherten Deck weniger als 5 Karten enthalten,
so wird das Deck zurückgesetzt und ebenfalls das Standard-Start-Deck geladen.
Mit der methode saveDeck werden die Decks nach Spielende(nach Kartentausch) in der Datei
apgespeichert. 
Außerdem gibt es die Methode chooseCard mit der der Spieler die Karte wählen kann, die er ablegen
möchte und eine Methode placeCard mit der der Spieler die Position der Karte auf dem Spielbrett
festlegen kann. 
//evtl Exception wenn Feld bereits belegt.
 
Die Klasse Deck enthält eine eine 2 ArrayLists vom Typ Karten.
In einer ArrayList wird das komplette Deck gespeichert.
//Statt zwei Arrays evtl. jeder Karte noch eine gelegt/nicht gelegt Variable hinzufügen.
In die zweite ArrayList werden zu Spielbeginn, die Karten, die für das aktuelle Spiel ausgewählt wurden gespeichert.
Wurden die Karten ausgewählt wird die erste ArrayList resettet und im weiteren Spielverlauf zum Speichern der
bereits ausgelegten Karten verwendent.
Mit der Methode addCard kann eine Karte dem Deck hinzugefügt werden.
Mit der Methode takeCard kann eine Karte aus dem Deck entfernt werden.

Die Klasse Karten enthält ein Array der Länge 4 um die Zahlen auf den Karten zu speichern und
eine Variable um die Farbe der Karte zu speichern.